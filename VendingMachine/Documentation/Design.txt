Vending Machine
--------------------

General Details
********************
Application with GUI to emulate a vending machine.
While the requirements are quite explicit, design to requirements, but allow room for the program to evolve. For example, the requirements state that all cans are the same price, but if we have one of the properties of a can be its price, we can set individual prices in the future.
Use .NET 6 Web API for backend solution to provide functions for performing CRUD operations on the data.
Use Angular to provide a front end for showing all the required details.
While not required use SignalR to handle updates of the frontend. This allows the API to be run directly over the internet, as opposed to just via the UI. This would allow someone in the backend to manually update something in the system via the API, and have the UI update in real time. (This might be bonus functionality)

Design Decisions
*******************
Use a list to store the can stock for the vending machine. This will be an array of size 10.

Each product can have the following properties:
ID - a unique identifier
Name - the name of the product (flavour of the can)
Image - an image to show in the UI (for this version I will use an icon with a colour. This field will hold the colour)
StockLimit - the maximum number allow of this product (may leave this out and assume 20 for each product for initial implementation)
CurrentStock - the current number available of this product
Price - the price for a single product, will be null by default (may leave this off initially and add if time. this would be a nullable value and we would use the set value if there is one, otherwise the value saved in the config)

We also need to log a list of transactions including the following details:
ID - a unique identifier
ProductID - a foreign key referencing the id of the product sold. Will be null by default.
PaymentType - Whether the transaction was via cash or card
CreatedDateTime - the date and time the transaction was created
LastUpdatedDateTime - when the transaction was last updated.
Amount - the amount of the transaction. (this can be left off initially as we know that it is the exact amount and that the prices can't change, but may add some flexibility if there is time)
Status - the status of the transaction, i.e. success, cancelled or error (error will be returned when a transaction fails because there is an error, and cancelled will be returned if the user decides to cancel the transaction). This relates to an enum. Will be Created by default.

We will have a TransactionStatus enum with the following values:
Created
Success
Failed
Cancelled

Add some error handling around receiving a payment and ejecting a can, e.g. if there are no more cans to eject then reject the transaction, if more than one can is ejected or no cans are ejected, i.e. there is an exception, then reject the transaction and log the error.

The design mentioned above keeps track of thee numbers of cans available for each flavour, as well as the transactions in the system linked to a can type, so we can report on the revenue for each flavour and perform reporting such as which is the most popular flavour, which is the least popular, etc.

The amount of cash in the machine, the amount of credit card payments in the machine, and the number of cans sold can all be derived from the transaction data.

There will also be variables to keep track of the amount of cash in the system, and the amount of credit card transactions in the system.

We will assume that there is a limit to the number of each type of can that The amount of cans added for each flavour cannot exceed that limit. Any cans above the limit will be ignored during the restocking process.

I will store the data in a DB if I have time, though as pointed out, this is not required. Obviously the problem with this implementation in a real world scenario is that if the power is stopped for some reason, e.g. turned off at the switch, power outage, etc., then all the information is lost, which doesn't make for a great system.

The API endpoints exposed will be as follows:

GetProducts - A function to get all Products and their current details
GetCashPayments - A function to return all the successful transactions paid by cash
GetCreditCardPayments - A function to return all the successful credit card transactions.
CreateTransaction - A function to create a transaction in the system. This relates to the real world scenario of inserting your money or tapping/swiping your card. Takes a payment type as input.
CancelTransaction - A function to cancel a transaction. This relates to the real world scenario where a transaction is cancelled and the money is returned to the user.
SellProduct - A function to select and dispense the product. This relates to the real world scenario of selecting the product to purchase. Takes a transaction id and product id as input.
RestockProduct - A function to restock an individual product. Takes a product id, with an optional count as input. The count is the number of products to restock, with a null value meaning to restock to max.
RestockAll - A function to restock all products to their stock limits.
ClearFunds - A function to reset the amount of cash and credit card payments in the system.